{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(SO0027) AWS Serverless Bot Framework %%VERSION%% - This AWS CloudFormation template helps you provision the AWS Serverless Bot Framework stack without worrying about creating and configuring the underlying AWS infrastructure. **WARNING** This template creates Amazon API Gateway, AWS Lambda, Amazon S3, Amazon DynamoDB, Amazon Polly, Amazon Cognito, and Amazon CloudWatch resources. You will be billed for them if you create a stack from this template. **NOTICE** Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under the Amazon Software License (the License). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/asl/ or in the license file accompanying this file. This file is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [{
          "Label": {
            "default": "Bot Settings"
          },
          "Parameters": ["BotName", "BotLanguage", "BotGender"]
        }, {
          "Label": {
            "default": "Sample Web App"
          },
          "Parameters": ["AccessIpAddress"]
        }],
        "ParameterLabels": {
          "BotName": {
            "default": "Name"
          },
          "BotLanguage": {
            "default": "Language"
          },
          "BotGender": {
            "default": "Gender"
          },
          "AccessIpAddress": {
            "default": "Source IPs"
          }
        }
      }
    },
    "Parameters": {
      "BotName": {
        "Type": "String",
        "Default": "Jao",
        "MinLength": "1",
        "Description": "Define the bot name. This value is used when it will answer about it's name, for example."
      },
      "BotLanguage": {
        "Type": "String",
        "Default": "Portuguese",
        "Description": "Choose the language that this bot will understand and comunicate.",
        "AllowedValues": [
          "Portuguese",
          "Spanish",
          "English",
          "French",
          "Italian",
          "German",
          "Russian"
        ]
      },
      "BotGender": {
        "Type": "String",
        "Default": "Male",
        "AllowedValues": ["Male", "Female"],
        "Description": "Choose the bot voice gender"
      },
      "AccessIpAddress": {
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "Description": "The IP address range that can access the Sample Web App (in CIDR notation).",
        "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
    "Mappings": {
      "Solution": {
        "Data": {
          "ID": "SO0027",
          "Version": "%%VERSION%%",
          "SendAnonymousUsageData": "Yes"
        }
      }
    },
    "Conditions": {
      "RestrictAccess": {"Fn::Not": [{"Fn::Equals": [{"Ref": "AccessIpAddress"}, "0.0.0.0/0"]}]}
    },
    "Resources": {
      "SampleStack": {
        "Type": "AWS::CloudFormation::Stack",
        "Properties": {
          "TemplateURL": {
            "Fn::Join": ["/",
              {
                "Fn::Join": [".", ["https://s3", {
                  "Ref": "AWS::Region"
                }, "amazonaws.com.cn" ]]
              },
              {
                "Fn::Join": ["-", ["%%BUCKET_NAME%%", {
                  "Ref": "AWS::Region"
                }]]
              },
              "serverless-bot-framework/%%VERSION%%/serverless-bot-framework-sample.template"
            ]
          },
          "Parameters": {
            "AccessIpAddress": {
              "Ref": "AccessIpAddress"
            }
          }
        }
      },
  
      "Brain": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "Private"
        }
      },
      "TrainModelRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": ["Brain"],
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Policies": [{
            "PolicyName": "BrainBucket",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject"
                ],
                "Resource": {
                  "Fn::Join": ["", ["arn:aws-cn:s3:::", {
                    "Ref": "Brain"
                  }, "/*"]]
                }
              }]
            }
          }, {
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": {
                  "Fn::Join": [":", ["arn:aws-cn:logs", {
                    "Ref": "AWS::Region"
                  }, {
                    "Ref": "AWS::AccountId"
                  }, "log-group:/aws/lambda/*"]]
                }
              }]
            }
          }]
        }
      },
      "TrainModel": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": ["TrainModelRole"],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "-", [
                  "%%BUCKET_NAME%%",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-bot-framework/%%VERSION%%/train-model.zip"
          },
          "Description": "Function to Train the Brain",
          "Handler": "index.handler",
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "TrainModelRole",
              "Arn"
            ]
          },
          "Runtime": "nodejs8.10",
          "Timeout": 60
        }
      },
      "LambdaInvokePermissionTrainModel": {
        "Type": "AWS::Lambda::Permission",
        "DependsOn": ["TrainModel"],
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "TrainModel",
              "Arn"
            ]
          },
          "Principal": "s3.amazonaws.com",
          "SourceAccount": {
            "Ref": "AWS::AccountId"
          }
        }
      },
  
      "DynamoEntityResolver": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [{
              "AttributeName": "uid",
              "AttributeType": "S"
            },
            {
              "AttributeName": "entity-value",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [{
            "AttributeName": "uid",
            "KeyType": "HASH"
          }],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "GlobalSecondaryIndexes": [{
            "IndexName": "entity-value-index",
            "KeySchema": [{
              "AttributeName": "entity-value",
              "KeyType": "HASH"
            }],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }]
        }
      },
      "DynamoContext": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [{
              "AttributeName": "uid",
              "AttributeType": "S"
            },
            {
              "AttributeName": "sessionID",
              "AttributeType": "S"
            },
            {
              "AttributeName": "timestamp",
              "AttributeType": "N"
            }
          ],
          "KeySchema": [{
            "AttributeName": "uid",
            "KeyType": "HASH"
          }],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "GlobalSecondaryIndexes": [{
            "IndexName": "sessionID-timestamp-index",
            "KeySchema": [{
                "AttributeName": "sessionID",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "5",
              "WriteCapacityUnits": "5"
            }
          }]
        }
      },
      "DynamoConversationLogs": {
        "Type": "AWS::DynamoDB::Table",
        "Properties": {
          "AttributeDefinitions": [{
            "AttributeName": "uid",
            "AttributeType": "S"
          }, {
            "AttributeName": "timestamp",
            "AttributeType": "N"
          }],
          "KeySchema": [{
              "AttributeName": "uid",
              "KeyType": "HASH"
            },
            {
              "AttributeName": "timestamp",
              "KeyType": "RANGE"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          }
        }
      },
  
      "PollyFunctionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Policies": [{
            "PolicyName": "Polly",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "polly:SynthesizeSpeech"
                ],
                "Resource": "*"
              }]
            }
          }, {
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": {
                  "Fn::Join": [":", ["arn:aws-cn:logs", {
                    "Ref": "AWS::Region"
                  }, {
                    "Ref": "AWS::AccountId"
                  }, "log-group:/aws/lambda/*"]]
                }
              }]
            }
          }]
        }
      },
      "Polly": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": ["PollyFunctionRole"],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "-", [
                  "%%BUCKET_NAME%%",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-bot-framework/%%VERSION%%/polly-service.zip"
          },
          "Description": "Bot Polly Function to APIGateway",
          "Handler": "index.handler",
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "CoreFunctionRole",
              "Arn"
            ]
          },
          "Runtime": "nodejs8.10",
          "Timeout": 180
        }
      },
      "LambdaInvokePermissionPolly": {
        "Type": "AWS::Lambda::Permission",
        "DependsOn": ["Polly"],
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "Polly",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "", [
                "arn:aws:execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BotApi"
                },
                "/",
                {
                  "Ref": "BotApiStage"
                },
                "/*"
              ]
            ]
          }
        }
      },
  
      "CoreFunctionRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": ["Brain", "DynamoContext", "DynamoConversationLogs", "DynamoEntityResolver"],
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Policies": [{
            "PolicyName": "Polly",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "polly:SynthesizeSpeech"
                ],
                "Resource": "*"
              }]
            }
          }, {
            "PolicyName": "BrainBucket",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": {
                  "Fn::Join": ["", ["arn:aws-cn:s3:::", {
                    "Ref": "Brain"
                  }, "/*"]]
                }
              }]
            }
          }, {
            "PolicyName": "DynamoDB",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem",
                  "dynamodb:DescribeTable",
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:Query",
                  "dynamodb:UpdateItem"
                ],
                "Resource": [{
                    "Fn::GetAtt": ["DynamoContext", "Arn"]
                  },
                  {
                    "Fn::Join": ["", [{
                      "Fn::GetAtt": ["DynamoContext", "Arn"]
                    }, "/*"]]
                  },
                  {
                    "Fn::GetAtt": ["DynamoConversationLogs", "Arn"]
                  },
                  {
                    "Fn::Join": ["", [{
                      "Fn::GetAtt": ["DynamoConversationLogs", "Arn"]
                    }, "/*"]]
                  },
                  {
                    "Fn::GetAtt": ["DynamoEntityResolver", "Arn"]
                  },
                  {
                    "Fn::Join": ["", [{
                      "Fn::GetAtt": ["DynamoEntityResolver", "Arn"]
                    }, "/*"]]
                  }
                ]
              }]
            }
          }, {
            "PolicyName": "CallKnowledgeServices",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": [{
                    "Fn::GetAtt": ["SampleStack", "Outputs.KnowledgeWeatherForecastArn"]
                  },
                  {
                    "Fn::GetAtt": ["SampleStack", "Outputs.KnowledgePasswordResetArn"]
                  }
                ]
              }]
            }
          }, {
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": {
                  "Fn::Join": [
                    ":", [
                      "arn:aws-cn:logs",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "log-group:/aws/lambda/*"
                    ]
                  ]
                }
              }]
            }
          }]
        }
      },
      "Core": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": ["Brain", "CoreFunctionRole"],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "-", [
                  "%%BUCKET_NAME%%",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-bot-framework/%%VERSION%%/core.zip"
          },
          "Description": "Bot Core Function",
          "Handler": "index.handler",
          "MemorySize": 1024,
          "Environment": {
            "Variables": {
              "bucketName": {
                "Ref": "Brain"
              },
              "botLanguage": {
                "Ref": "BotLanguage"
              },
              "botGender": {
                "Ref": "BotGender"
              },
              "botName": {
                "Ref": "BotName"
              },
              "forceCacheUpdate": "false"
            }
          },
          "Role": {
            "Fn::GetAtt": [
              "CoreFunctionRole",
              "Arn"
            ]
          },
          "Runtime": "nodejs8.10",
          "Timeout": 180
        }
      },
      "LambdaInvokePermissionCore": {
        "Type": "AWS::Lambda::Permission",
        "DependsOn": ["Core"],
        "Properties": {
          "Action": "lambda:invokeFunction",
          "FunctionName": {
            "Fn::GetAtt": [
              "Core",
              "Arn"
            ]
          },
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": {
            "Fn::Join": [
              "", [
                "arn:aws:execute-api:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":",
                {
                  "Ref": "BotApi"
                },
                "/",
                {
                  "Ref": "BotApiStage"
                },
                "/*"
              ]
            ]
          }
        }
      },
  
      "BotApi": {
        "Type": "AWS::ApiGateway::RestApi",
        "DependsOn": ["CreateUniqueID"],
        "Properties": {
          "Name": {
            "Fn::Join": [
              "-", [
                "bot-api",
                {
                  "Ref": "AWS::StackName"
                }
              ]
            ]
          },
          "Description": "Bot API",
          "FailOnWarnings": true
        }
      },
      "BotResourceCore": {
        "Type": "AWS::ApiGateway::Resource",
        "DependsOn": ["BotApi"],
        "Properties": {
          "RestApiId": {
            "Ref": "BotApi"
          },
          "ParentId": {
            "Fn::GetAtt": [
              "BotApi",
              "RootResourceId"
            ]
          },
          "PathPart": "core"
        }
      },
      "BotCorePostRequest": {
        "Type": "AWS::ApiGateway::Method",
        "DependsOn": ["Core", "BotResourceCore", "BotApi"],
        "Properties": {
          "AuthorizationType": {
            "Fn::If": ["RestrictAccess", "AWS_IAM", "NONE"]
          },
          "HttpMethod": "POST",
          "Integration": {
            "Type": "AWS",
            "IntegrationHttpMethod": "POST",
            "Uri": {
              "Fn::Join": [
                "", [
                  "arn:aws:apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "Core",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            },
            "IntegrationResponses": [{
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": 200
            }]
          },
          "ResourceId": {
            "Ref": "BotResourceCore"
          },
          "RestApiId": {
            "Ref": "BotApi"
          },
          "MethodResponses": [{
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }]
        }
      },
      "BotCoreOptionsRequest": {
        "Type": "AWS::ApiGateway::Method",
        "DependsOn": ["BotResourceCore", "BotApi"],
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "Integration": {
            "Type": "MOCK",
            "IntegrationHttpMethod": "OPTIONS",
            "IntegrationResponses": [{
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": 200
            }],
            "PassthroughBehavior": "WHEN_NO_MATCH",
            "RequestTemplates": {
              "application/json": "{'statusCode': 200}"
            }
          },
          "ResourceId": {
            "Ref": "BotResourceCore"
          },
          "RestApiId": {
            "Ref": "BotApi"
          },
          "MethodResponses": [{
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }]
        }
      },
      "BotResourceServices": {
        "Type": "AWS::ApiGateway::Resource",
        "DependsOn": ["BotApi"],
        "Properties": {
          "RestApiId": {
            "Ref": "BotApi"
          },
          "ParentId": {
            "Fn::GetAtt": [
              "BotApi",
              "RootResourceId"
            ]
          },
          "PathPart": "services"
        }
      },
      "BotResourceServicesPolly": {
        "Type": "AWS::ApiGateway::Resource",
        "DependsOn": ["BotApi", "BotResourceServices"],
        "Properties": {
          "RestApiId": {
            "Ref": "BotApi"
          },
          "ParentId": {
            "Ref": "BotResourceServices"
          },
          "PathPart": "polly"
        }
      },
      "BotPollyPostRequest": {
        "Type": "AWS::ApiGateway::Method",
        "DependsOn": ["Polly", "BotResourceServicesPolly", "BotApi"],
        "Properties": {
          "AuthorizationType": {
            "Fn::If": ["RestrictAccess", "AWS_IAM", "NONE"]
          },
          "HttpMethod": "POST",
          "Integration": {
            "Type": "AWS",
            "IntegrationHttpMethod": "POST",
            "Uri": {
              "Fn::Join": [
                "", [
                  "arn:aws:apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "Polly",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            },
            "IntegrationResponses": [{
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": 200
            }]
          },
          "ResourceId": {
            "Ref": "BotResourceServicesPolly"
          },
          "RestApiId": {
            "Ref": "BotApi"
          },
          "MethodResponses": [{
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }]
        }
      },
      "BotPollyOptionsRequest": {
        "Type": "AWS::ApiGateway::Method",
        "DependsOn": ["BotResourceServicesPolly", "BotApi"],
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "OPTIONS",
          "Integration": {
            "Type": "MOCK",
            "IntegrationHttpMethod": "OPTIONS",
            "IntegrationResponses": [{
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              },
              "StatusCode": 200
            }],
            "PassthroughBehavior": "WHEN_NO_MATCH",
            "RequestTemplates": {
              "application/json": "{'statusCode': 200}"
            }
          },
          "ResourceId": {
            "Ref": "BotResourceServicesPolly"
          },
          "RestApiId": {
            "Ref": "BotApi"
          },
          "MethodResponses": [{
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }]
        }
      },
      "BotApiDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": ["BotCorePostRequest", "BotCoreOptionsRequest", "BotPollyPostRequest", "BotPollyOptionsRequest", "BotApi"],
        "Properties": {
          "RestApiId": {
            "Ref": "BotApi"
          }
        }
      },
      "BotApiStage": {
        "Type": "AWS::ApiGateway::Stage",
        "DependsOn": ["BotApiDeployment", "BotApi"],
        "Properties": {
          "DeploymentId": {
            "Ref": "BotApiDeployment"
          },
          "RestApiId": {
            "Ref": "BotApi"
          },
          "StageName": "prod"
        }
      },
      "BotApiKey": {
        "Type": "AWS::ApiGateway::ApiKey",
        "DependsOn": ["BotApiStage", "BotApi"],
        "Properties": {
          "Description": "Bot API Key",
          "Enabled": "true",
          "StageKeys": [{
            "RestApiId": {
              "Ref": "BotApi"
            },
            "StageName": {
              "Ref": "BotApiStage"
            }
          }]
        }
      },
  
      "SecurityStack": {
        "Type": "AWS::CloudFormation::Stack",
        "Condition": "RestrictAccess",
        "DependsOn": ["SampleStack"],
        "Properties": {
          "TemplateURL": {
            "Fn::Join": ["/", [{
                "Fn::Join": [".", ["https://s3", {
                  "Ref": "AWS::Region"
                }, "amazonaws.com.cn" ]]
              },
              {
                "Fn::Join": ["-", ["%%BUCKET_NAME%%", {
                  "Ref": "AWS::Region"
                }]]
              },
              "serverless-bot-framework/%%VERSION%%/serverless-bot-framework-security.template"
            ]]
          },
          "Parameters": {
            "ParentStackName": {
              "Ref": "AWS::StackName"
            },
            "AccessIpAddress": {
              "Ref": "AccessIpAddress"
            },
            "BotApi": {
              "Ref": "BotApi"
            },
            "WebClient": {
              "Fn::GetAtt": ["SampleStack", "Outputs.WebClient"]
            }
          }
        }
      },
      "CustomConfigurationRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": ["Brain", "SampleStack", "BotApiKey"],
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Policies": [{
              "PolicyName": "CloudFormationAccess",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStacks",
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:cloudformation:", {
                          "Ref": "AWS::Region"
                        },
                        ":", {
                          "Ref": "AWS::AccountId"
                        },
                        ":stack/", {
                          "Ref": "AWS::StackName"
                        },
                        "/*"
                      ]
                    ]
                  }
                }]
              }
            },
            {
              "PolicyName": "BrainBucket",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetBucketLocation",
                    "s3:GetBucketNotification",
                    "s3:PutBucketNotification"
                  ],
                  "Resource": {
                    "Fn::GetAtt": ["Brain", "Arn"]
                  }
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": ["", ["arn:aws-cn:s3:::", {
                      "Ref": "Brain"
                    }, "/*"]]
                  }
                }]
              }
            }, {
              "PolicyName": "WebClientBucket",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": {
                    "Fn::GetAtt": ["SampleStack", "Outputs.WebClientArn"]
                  }
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": ["", ["arn:aws:s3:::", {
                      "Fn::GetAtt": ["SampleStack", "Outputs.WebClient"]
                    }, "/*"]]
                  }
                }]
              }
            }, {
              "PolicyName": "ApiGateway",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "apigateway:POST"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        "::/restapis/",
                        {
                          "Ref": "BotApi"
                        },
                        "/deployments"
                      ]
                    ]
                  }
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "apigateway:GET"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "", [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        "::/apikeys/",
                        {
                          "Ref": "BotApiKey"
                        }
                      ]
                    ]
                  }
                }]
              }
            }, {
              "PolicyName": "CloudWatchLogs",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": {
                    "Fn::Join": [":", ["arn:aws-cn:logs", {
                      "Ref": "AWS::Region"
                    }, {
                      "Ref": "AWS::AccountId"
                    }, "log-group:/aws/lambda/*"]]
                  }
                }]
              }
            }
          ]
        }
      },
      "CustomResource": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": ["CustomConfigurationRole"],
        "Properties": {
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "-", [
                  "%%BUCKET_NAME%%",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "serverless-bot-framework/%%VERSION%%/custom-resource.zip"
          },
          "Description": "Function to configure Jao Files",
          "Handler": "index.lambda_handler",
          "MemorySize": 128,
          "Role": {
            "Fn::GetAtt": [
              "CustomConfigurationRole",
              "Arn"
            ]
          },
          "Runtime": "python2.7",
          "Timeout": 60
        }
      },
      "CustomResourceLambdaCustomConfig": {
        "Type": "Custom::CreateBotConfig",
        "DependsOn": ["CustomResource", "BotApi", "BotApiKey", "Brain", "DynamoConversationLogs", "DynamoEntityResolver", "DynamoContext", "SampleStack", "TrainModel"],
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "CustomResource",
              "Arn"
            ]
          },
          "AwsId": {
            "Ref": "AWS::AccountId"
          },
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "ApiUri": {
            "Fn::Join": [
              "", [
                "https://",
                {
                  "Ref": "BotApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com.cn/",
                {
                  "Ref": "BotApiStage"
                },
                "/"
              ]
            ]
          },
          "ApiKey": {
            "Ref": "BotApiKey"
          },
          "ApiStageName": {
            "Ref": "BotApiStage"
          },
          "ApiId": {
            "Ref": "BotApi"
          },
          "BotName": {
            "Ref": "BotName"
          },
          "BotLanguage": {
            "Ref": "BotLanguage"
          },
          "BotGender": {
            "Ref": "BotGender"
          },
          "BrainBucket": {
            "Ref": "Brain"
          },
          "ConversationLogsTable": {
            "Ref": "DynamoConversationLogs"
          },
          "EntitiesTable": {
            "Ref": "DynamoEntityResolver"
          },
          "ContextTable": {
            "Ref": "DynamoContext"
          },
          "SampleWebClientBucket": {
            "Fn::GetAtt": ["SampleStack", "Outputs.WebClient"]
          },
          "SampleWebclientPackage": {
            "Fn::Join": [
              "", [
                "https://s3-",
                {
                  "Ref": "AWS::Region"
                },
                ".amazonaws.com.cn/",
                "%%BUCKET_NAME%%",
                "-",
                {
                  "Ref": "AWS::Region"
                },
                "/serverless-bot-framework/%%VERSION%%/sample-webclient.zip"
              ]
            ]
          },
          "SamplePasswordResetBotArn": {
            "Fn::GetAtt": ["SampleStack", "Outputs.KnowledgePasswordReset"]
          },
          "CognitoIdentityPool": {
            "Fn::If": ["RestrictAccess", {
              "Fn::GetAtt": ["SecurityStack", "Outputs.CognitoIdentityPool"]
            }, {
              "Ref": "AWS::NoValue"
            }]
          },
          "SampleWeatherForecastBotArn": {
            "Fn::GetAtt": ["SampleStack", "Outputs.KnowledgeWeatherForecast"]
          },
          "TrainModelArn": {
            "Fn::GetAtt": [
              "TrainModel",
              "Arn"
            ]
          },
          "StackName": {
            "Ref": "AWS::StackName"
          }
        }
      },
  
  
      "SolutionHelperRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }]
          },
          "Policies": [{
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams"
                ],
                "Resource": {
                  "Fn::Join": [":", ["arn:aws-cn:logs", {
                    "Ref": "AWS::Region"
                  }, {
                    "Ref": "AWS::AccountId"
                  }, "log-group:/aws/lambda/*"]]
                }
              }]
            }
          }]
        }
      },
      "SolutionHelper": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": ["SolutionHelperRole"],
        "Properties": {
          "Handler": "solution-helper.lambda_handler",
          "Role": {
            "Fn::GetAtt": [
              "SolutionHelperRole",
              "Arn"
            ]
          },
          "Description": "This function is a CloudFormation custom lambda resource that generates UUID for each deployment.",
          "Code": {
            "S3Bucket": {
              "Fn::Join": [
                "", [
                  "solutions-", {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            },
            "S3Key": "library/solution-helper/v3/solution-helper.zip"
          },
          "Runtime": "python2.7",
          "MemorySize": 128,
          "Timeout": "300"
        }
      },
      "CreateUniqueID": {
        "Type": "Custom::CreateUUID",
        "DependsOn": ["SolutionHelper"],
        "Properties": {
          "ServiceToken": {
            "Fn::GetAtt": [
              "SolutionHelper",
              "Arn"
            ]
          },
          "Region": {
            "Ref": "AWS::Region"
          },
          "CreateUniqueID": "true"
        }
      }
    },
    "Outputs": {
      "SampleWebClient": {
        "Description": "Sample WebClient URL.",
        "Value": {
          "Fn::Join": [
            "", [
              "https://",
              {
                "Fn::GetAtt": ["SampleStack", "Outputs.WebClientDualStackDomainName"]
              },
              "/index.html"
            ]
          ]
        }
      },
      "BrainBucket": {
        "Description": "S3 Bucket where all brain related files are stores (ex: knowledge.json).",
        "Value": {
          "Ref": "Brain"
        }
      },
      "ApiEndpoint": {
        "Description": "API URL for customers build their own clients consumers.",
        "Value": {
          "Fn::Join": [
            "", [
              "http://",
              {
                "Ref": "BotApi"
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com.cn",
              {
                "Ref": "BotApiStage"
              },
              "/"
            ]
          ]
        }
      }
    }
  }
